//let n = +require("fs").readFileSync("/dev/stdin").toString().trim();

// dp 사용시 : 연산 횟수는 n-2번 (앞의 두 항은 연산할 필요 없으므로)
//
// 재귀 함수 사용시 : 결국 n번째 피보나치수를 모조리 a2, a1로 쪼개야 하고, 그건 다 1이므로
// a(n)을 모조리 1로 쪼개면 1이 몇개 나오냐는 말과 같다.
// 즉 a(n), n번째 피보나치 수를 구하면 됨

let n = 30;

let memo = [0, 1, 1];

const fibo = (n) => {
        if (memo[n] !== undefined) {
                return memo[n];
        } else {
                memo[n] = fibo(n - 1) + fibo(n - 2);
                return memo[n];
        }
};

console.log(fibo(n), n - 2);

// console.log(memo);
// 문제 풀기 전까지 생각해본 적이 없는데
// a(n) 이 자신의 전 항과 전전 항을 더하는 것이므로
// 대략 다음 항은 현재 항에 대해 1.5배 정도 커지는 것같고
// 더 러프하게 말하자면 밑이 1~2 사이인 지수함수적으로 커지는 것 같음 (대강 1.575?)
// 생각보다 되게 빨리 커지는구나..
// 그래서 예시의 832040을 보고 바로 이게 피보나치 수라는 걸 알아차리지 못 했음.
// 겨우 30번째 항인데 이렇게 클 것 같지는 않다고 생각해서..
